{"version":3,"sources":["../src/referral.ts","../src/chunks.ts","../src/constant.ts","../src/idl.ts","../src/utils.ts","../src/filter.ts"],"sourcesContent":["import { AnchorProvider, IdlAccounts, Program } from \"@coral-xyz/anchor\";\nimport {\n  AccountLayout,\n  createAssociatedTokenAccountInstruction,\n  getAssociatedTokenAddressSync,\n  RawAccount,\n  TOKEN_2022_PROGRAM_ID,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport {\n  Connection,\n  GetProgramAccountsFilter,\n  PublicKey,\n  Transaction,\n  TransactionInstruction,\n  TransactionMessage,\n  VersionedTransaction,\n} from \"@solana/web3.js\";\nimport chunk from \"lodash/chunk\";\n\nimport { chunkedGetMultipleAccountInfos } from \"./chunks\";\nimport { PROGRAM_ID } from \"./constant\";\nimport { IDL, Referral } from \"./idl\";\nimport { getOrCreateATAInstruction } from \"./utils\";\n\nexport interface InitializeProjectVariable {\n  adminPubKey: PublicKey;\n  basePubKey: PublicKey;\n  name: string;\n  defaultShareBps: number;\n}\n\nexport interface TransferProjectVariable {\n  newAdminPubKey: PublicKey;\n  projectPubKey: PublicKey;\n}\n\nexport interface InitializeReferralAccountVariable {\n  projectPubKey: PublicKey;\n  partnerPubKey: PublicKey;\n  payerPubKey: PublicKey;\n  referralAccountPubKey: PublicKey;\n}\n\nexport interface InitializeReferralAccountWithNameVariable {\n  projectPubKey: PublicKey;\n  partnerPubKey: PublicKey;\n  payerPubKey: PublicKey;\n  name: string;\n}\n\nexport interface TransferReferralAccountVariable {\n  newPartnerPubKey: PublicKey;\n  referralAccountPubKey: PublicKey;\n}\n\nexport interface GetReferralAccountPubkeyVariable {\n  projectPubKey: PublicKey;\n  name: string;\n}\n\nexport interface GetReferralTokenAccountPubkeyVariable {\n  referralAccountPubKey: PublicKey;\n  mint: PublicKey;\n}\n\nexport interface InitializeReferralTokenAccountVariable {\n  payerPubKey: PublicKey;\n  referralAccountPubKey: PublicKey;\n  mint: PublicKey;\n}\n\nexport interface ClaimVariable {\n  payerPubKey: PublicKey;\n  referralAccountPubKey: PublicKey;\n  mint: PublicKey;\n}\n\nexport interface ClaimAllVariable {\n  payerPubKey: PublicKey;\n  referralAccountPubKey: PublicKey;\n}\n\nexport interface RawAccountWithPubkey {\n  pubkey: PublicKey;\n  account: RawAccount;\n}\n\nexport const useReferral = (connection: Connection) => {\n  return new ReferralProvider(connection);\n};\n\nexport class ReferralProvider {\n  private program: Program<Referral>;\n  private connection: Connection;\n\n  constructor(connection: Connection) {\n    this.connection = connection;\n\n    const provider = new AnchorProvider(\n      connection,\n      {} as any,\n      AnchorProvider.defaultOptions(),\n    );\n\n    this.program = new Program(IDL, PROGRAM_ID, provider);\n  }\n\n  public async getProjects(filters: GetProgramAccountsFilter[] = []) {\n    return await this.program.account.project.all(filters);\n  }\n\n  public async getProject(pubkey: PublicKey) {\n    return await this.program.account.project.fetch(pubkey);\n  }\n\n  public async getReferralAccount(pubkey: PublicKey) {\n    return await this.program.account.referralAccount.fetch(pubkey);\n  }\n\n  public async getReferralAccounts(filters: GetProgramAccountsFilter[] = []) {\n    return await this.program.account.referralAccount.all(filters);\n  }\n\n  public getProjectAuthorityPubKey(\n    project: IdlAccounts<Referral>[\"project\"],\n  ): PublicKey {\n    let [projectAuthority] = PublicKey.findProgramAddressSync(\n      [Buffer.from(\"project_authority\"), project.base.toBuffer()],\n      this.program.programId,\n    );\n\n    return projectAuthority;\n  }\n\n  public getReferralAccountWithNamePubKey({\n    projectPubKey,\n    name,\n  }: GetReferralAccountPubkeyVariable) {\n    const [referralAccountPubKey] = PublicKey.findProgramAddressSync(\n      [Buffer.from(\"referral\"), projectPubKey.toBuffer(), Buffer.from(name)],\n      this.program.programId,\n    );\n\n    return referralAccountPubKey;\n  }\n\n  public getReferralTokenAccountPubKey({\n    referralAccountPubKey,\n    mint,\n  }: GetReferralTokenAccountPubkeyVariable) {\n    const [referralTokenAccountPubKey] = PublicKey.findProgramAddressSync(\n      [\n        Buffer.from(\"referral_ata\"),\n        referralAccountPubKey.toBuffer(),\n        mint.toBuffer(),\n      ],\n      this.program.programId,\n    );\n\n    return referralTokenAccountPubKey;\n  }\n\n  public async getReferralTokenAccounts(\n    referralAccountAddress: string,\n  ): Promise<{\n    tokenAccounts: RawAccountWithPubkey[];\n    token2022Accounts: RawAccountWithPubkey[];\n  }> {\n    const referralAccount = await this.program.account.referralAccount.fetch(\n      new PublicKey(referralAccountAddress),\n    );\n\n    const [tokenAccounts, token2022Accounts] = await Promise.all(\n      [TOKEN_PROGRAM_ID, TOKEN_2022_PROGRAM_ID].map(async (programId) => {\n        const mintSet = new Set();\n        const possibleTokenAccountSet = new Set<string>();\n        const tokenAccountMap = new Map<string, RawAccount>();\n\n        // get all token accounts belong to project\n        const allTokenAccounts = await this.connection.getTokenAccountsByOwner(\n          referralAccount.project,\n          { programId },\n        );\n\n        // get unique mint and all token accounts\n        allTokenAccounts.value.map((tokenAccount) => {\n          const accountData = AccountLayout.decode(tokenAccount.account.data);\n\n          if (!mintSet.has(accountData.mint.toBase58())) {\n            const address = this.getReferralTokenAccountPubKey({\n              referralAccountPubKey: new PublicKey(referralAccountAddress),\n              mint: accountData.mint,\n            });\n            mintSet.add(accountData.mint.toBase58());\n            possibleTokenAccountSet.add(address.toBase58());\n          }\n\n          tokenAccountMap.set(tokenAccount.pubkey.toBase58(), accountData);\n        });\n\n        // loop through mint and find token account belong to referral account\n        return Array.from(possibleTokenAccountSet).reduce((acc, address) => {\n          const tokenAccount = tokenAccountMap.get(address);\n          if (tokenAccount) {\n            acc.push({ pubkey: new PublicKey(address), account: tokenAccount });\n          }\n\n          return acc;\n        }, [] as RawAccountWithPubkey[]);\n      }),\n    );\n\n    return { tokenAccounts, token2022Accounts };\n  }\n\n  public async getReferralTokenAccountsWithStrategy(\n    referralAccountAddress: string,\n    strategy:\n      | { type: \"top-tokens\"; topN: number }\n      | { type: \"token-list\"; tokenList: \"all\" | \"strict\" } = {\n      type: \"top-tokens\",\n      topN: 100,\n    },\n  ): Promise<{\n    tokenAccounts: RawAccountWithPubkey[];\n    token2022Accounts: RawAccountWithPubkey[];\n  }> {\n    const tokens = await (async () => {\n      if (strategy.type === \"top-tokens\") {\n        const topTokens = (\n          (await (\n            await fetch(\"https://cache.jup.ag/top-tokens\")\n          ).json()) as string[]\n        ).slice(0, strategy.topN);\n        return topTokens;\n      } else if (strategy.type === \"token-list\") {\n        const tokens = (\n          await (\n            await fetch(`https://token.jup.ag/${strategy.tokenList}`)\n          ).json()\n        ).map(({ address }) => address) as string[];\n        return tokens;\n      } else {\n        throw new Error(\"Invalid strategy\");\n      }\n    })();\n\n    const referralTokenAccounts = tokens.map((topToken) =>\n      this.getReferralTokenAccountPubKey({\n        referralAccountPubKey: new PublicKey(referralAccountAddress),\n        mint: new PublicKey(topToken),\n      }),\n    );\n\n    const tokenAccounts: RawAccountWithPubkey[] = [];\n    const token2022Accounts: RawAccountWithPubkey[] = [];\n    const accountInfos = await chunkedGetMultipleAccountInfos(\n      this.connection,\n      referralTokenAccounts,\n    );\n    for (const [index, accountInfo] of accountInfos.entries()) {\n      if (!accountInfo) continue;\n      const address = referralTokenAccounts[index];\n      const rawAccount = AccountLayout.decode(accountInfo.data);\n\n      const rawAccountWithPubkey = {\n        pubkey: address,\n        account: rawAccount,\n      };\n      if (accountInfo.owner.equals(TOKEN_PROGRAM_ID)) {\n        tokenAccounts.push(rawAccountWithPubkey);\n      } else if (accountInfo.owner.equals(TOKEN_2022_PROGRAM_ID)) {\n        token2022Accounts.push(rawAccountWithPubkey);\n      }\n    }\n\n    return {\n      tokenAccounts,\n      token2022Accounts,\n    };\n  }\n\n  public async initializeProject({\n    basePubKey,\n    adminPubKey,\n    name,\n    defaultShareBps,\n  }: InitializeProjectVariable): Promise<Transaction> {\n    const [projectPubKey] = PublicKey.findProgramAddressSync(\n      [Buffer.from(\"project\"), basePubKey.toBuffer()],\n      this.program.programId,\n    );\n\n    return await this.program.methods\n      .initializeProject({ name, defaultShareBps })\n      .accounts({\n        admin: adminPubKey,\n        project: projectPubKey,\n        base: basePubKey,\n      })\n      .transaction();\n  }\n\n  public async transferProject({\n    newAdminPubKey,\n    projectPubKey,\n  }: TransferProjectVariable): Promise<Transaction> {\n    const project = await this.program.account.project.fetch(projectPubKey);\n\n    return await this.program.methods\n      .transferProject({})\n      .accounts({\n        admin: project.admin,\n        project: projectPubKey,\n        newAdmin: newAdminPubKey,\n      })\n      .transaction();\n  }\n\n  public async initializeReferralAccount({\n    projectPubKey,\n    partnerPubKey,\n    payerPubKey,\n    referralAccountPubKey,\n  }: InitializeReferralAccountVariable): Promise<Transaction> {\n    return await this.program.methods\n      .initializeReferralAccount({})\n      .accounts({\n        project: projectPubKey,\n        partner: partnerPubKey,\n        referralAccount: referralAccountPubKey,\n        payer: payerPubKey,\n      })\n      .transaction();\n  }\n\n  public async initializeReferralAccountWithName({\n    projectPubKey,\n    partnerPubKey,\n    payerPubKey,\n    name,\n  }: InitializeReferralAccountWithNameVariable): Promise<{\n    tx: Transaction;\n    referralAccountPubKey: PublicKey;\n  }> {\n    const referralAccountPubKey = this.getReferralAccountWithNamePubKey({\n      projectPubKey,\n      name,\n    });\n\n    const tx = await this.program.methods\n      .initializeReferralAccountWithName({ name })\n      .accounts({\n        project: projectPubKey,\n        partner: partnerPubKey,\n        referralAccount: referralAccountPubKey,\n        payer: payerPubKey,\n      })\n      .transaction();\n\n    return { tx, referralAccountPubKey };\n  }\n\n  public async transferReferralAccount({\n    newPartnerPubKey,\n    referralAccountPubKey,\n  }: TransferReferralAccountVariable): Promise<Transaction> {\n    const referralAccount = await this.program.account.referralAccount.fetch(\n      referralAccountPubKey,\n    );\n\n    return await this.program.methods\n      .transferReferralAccount({})\n      .accounts({\n        partner: referralAccount.partner,\n        newPartner: newPartnerPubKey,\n        referralAccount: referralAccountPubKey,\n      })\n      .transaction();\n  }\n\n  public async initializeReferralTokenAccount({\n    payerPubKey,\n    referralAccountPubKey,\n    mint,\n  }: InitializeReferralTokenAccountVariable): Promise<{\n    tx: Transaction;\n    referralTokenAccountPubKey: PublicKey;\n  }> {\n    const mintAccount = await this.connection.getAccountInfo(mint);\n    if (!mintAccount) throw new Error(\"Invalid mint\");\n\n    if (\n      ![TOKEN_PROGRAM_ID, TOKEN_2022_PROGRAM_ID].some((id) =>\n        id.equals(mintAccount.owner),\n      )\n    )\n      throw new Error(\"Invalid mint\");\n\n    const referralAccount = await this.program.account.referralAccount.fetch(\n      referralAccountPubKey,\n    );\n\n    const referralTokenAccountPubKey = this.getReferralTokenAccountPubKey({\n      referralAccountPubKey,\n      mint,\n    });\n\n    const tx = await this.program.methods\n      .initializeReferralTokenAccount()\n      .accounts({\n        payer: payerPubKey,\n        project: referralAccount.project,\n        referralAccount: referralAccountPubKey,\n        referralTokenAccount: referralTokenAccountPubKey,\n        mint,\n        tokenProgram: mintAccount.owner,\n      })\n      .transaction();\n\n    return { tx, referralTokenAccountPubKey };\n  }\n\n  public async claim({\n    payerPubKey,\n    referralAccountPubKey,\n    mint,\n  }: ClaimVariable): Promise<Transaction> {\n    const mintAccount = await this.connection.getAccountInfo(mint);\n    if (!mintAccount) throw new Error(\"Invalid mint\");\n\n    if (\n      ![TOKEN_PROGRAM_ID, TOKEN_2022_PROGRAM_ID].some((id) =>\n        id.equals(mintAccount.owner),\n      )\n    )\n      throw new Error(\"Invalid mint\");\n\n    const referralAccount = await this.program.account.referralAccount.fetch(\n      referralAccountPubKey,\n    );\n    const project = await this.program.account.project.fetch(\n      referralAccount.project,\n    );\n\n    const [\n      referralTokenAccountPubKey,\n      [partnerTokenAccount, createPartnerTokenAccountIx],\n      [projectAdminTokenAccount, createProjectAdminTokenAccountIx],\n    ] = await Promise.all([\n      this.getReferralTokenAccountPubKey({\n        referralAccountPubKey,\n        mint,\n      }),\n      getOrCreateATAInstruction(\n        mint,\n        referralAccount.partner,\n        this.connection,\n        payerPubKey,\n        undefined,\n        mintAccount.owner,\n      ),\n      getOrCreateATAInstruction(\n        mint,\n        project.admin,\n        this.connection,\n        payerPubKey,\n        undefined,\n        mintAccount.owner,\n      ),\n    ]);\n\n    let preInstructions: TransactionInstruction[] = [];\n    if (createPartnerTokenAccountIx)\n      preInstructions.push(createPartnerTokenAccountIx);\n    if (createProjectAdminTokenAccountIx) {\n      const projectAuthority = this.getProjectAuthorityPubKey(project);\n      const ix = await this.program.methods\n        .createAdminTokenAccount()\n        .accounts({\n          project: referralAccount.project,\n          projectAuthority,\n          admin: project.admin,\n          projectAdminTokenAccount: projectAdminTokenAccount,\n          mint,\n          tokenProgram: mintAccount.owner,\n        })\n        .instruction();\n\n      preInstructions.push(ix);\n    }\n\n    return await this.program.methods\n      .claim()\n      .accounts({\n        payer: payerPubKey,\n        project: referralAccount.project,\n        admin: project.admin,\n        projectAdminTokenAccount,\n        referralAccount: referralAccountPubKey,\n        referralTokenAccount: referralTokenAccountPubKey,\n        partner: referralAccount.partner,\n        partnerTokenAccount: partnerTokenAccount,\n        mint,\n        tokenProgram: mintAccount.owner,\n      })\n      .preInstructions(preInstructions)\n      .transaction();\n  }\n\n  public async claimAll({\n    payerPubKey,\n    referralAccountPubKey,\n  }: ClaimAllVariable): Promise<VersionedTransaction[]> {\n    const blockhash = (await this.connection.getLatestBlockhash()).blockhash;\n    const lookupTableAccount = await this.connection\n      .getAddressLookupTable(\n        new PublicKey(\"GBzQG2iFrPwXjGtCnwNt9S5eHd8xAR8jUMt3QDJpnjud\"),\n      )\n      .then((res) => res.value);\n\n    const referralAccount = await this.program.account.referralAccount.fetch(\n      referralAccountPubKey,\n    );\n    const project = await this.program.account.project.fetch(\n      referralAccount.project,\n    );\n    const projectAuthority = this.getProjectAuthorityPubKey(project);\n\n    const { tokenAccounts, token2022Accounts } =\n      await this.getReferralTokenAccounts(referralAccountPubKey.toString());\n\n    const vtTxs = await Promise.all(\n      [tokenAccounts, token2022Accounts].map(async (accounts, idx) => {\n        const tokenProgramId =\n          idx === 0 ? TOKEN_PROGRAM_ID : TOKEN_2022_PROGRAM_ID;\n        const tokensWithAmount = accounts.filter(\n          (item) => item.account.amount > 0 && item.account.state === 1,\n        );\n\n        // get all token accounts belong to partner and admin\n        const partnerTokenAccounts =\n          await this.connection.getParsedTokenAccountsByOwner(\n            referralAccount.partner,\n            {\n              programId: tokenProgramId,\n            },\n          );\n        const adminTokenAccounts =\n          await this.connection.getParsedTokenAccountsByOwner(project.admin, {\n            programId: tokenProgramId,\n          });\n\n        const claimParams = await Promise.all(\n          tokensWithAmount.map(async (token) => {\n            let partnerTokenAccount = partnerTokenAccounts.value.find(\n              (item) =>\n                token.account.mint.toBase58() ===\n                item.account.data.parsed.info.mint,\n            )?.pubkey;\n            let projectAdminTokenAccount = adminTokenAccounts.value.find(\n              (item) =>\n                token.account.mint.toBase58() ===\n                item.account.data.parsed.info.mint,\n            )?.pubkey;\n            const referralTokenAccountPubKey =\n              this.getReferralTokenAccountPubKey({\n                referralAccountPubKey,\n                mint: token.account.mint,\n              });\n\n            const preInstructions: TransactionInstruction[] = [];\n\n            if (!partnerTokenAccount) {\n              partnerTokenAccount = getAssociatedTokenAddressSync(\n                token.account.mint,\n                referralAccount.partner,\n                true,\n                tokenProgramId,\n              );\n              preInstructions.push(\n                createAssociatedTokenAccountInstruction(\n                  payerPubKey,\n                  partnerTokenAccount,\n                  referralAccount.partner,\n                  token.account.mint,\n                  tokenProgramId,\n                ),\n              );\n            }\n\n            if (!projectAdminTokenAccount) {\n              projectAdminTokenAccount = getAssociatedTokenAddressSync(\n                token.account.mint,\n                project.admin,\n                true,\n                tokenProgramId,\n              );\n              const ix = await this.program.methods\n                .createAdminTokenAccount()\n                .accounts({\n                  project: referralAccount.project,\n                  projectAuthority,\n                  admin: project.admin,\n                  projectAdminTokenAccount,\n                  mint: token.account.mint,\n                  tokenProgram: tokenProgramId,\n                })\n                .instruction();\n\n              preInstructions.push(ix);\n            }\n\n            return {\n              referralTokenAccountPubKey,\n              projectAdminTokenAccount,\n              partnerTokenAccount,\n              preInstructions,\n              mint: token.account.mint,\n            };\n          }),\n        );\n\n        const batchParams = chunk(claimParams, 5);\n        return Promise.all(\n          batchParams.map(async (batch) => {\n            const txs = await Promise.all(\n              batch.map(\n                async ({\n                  preInstructions,\n                  mint,\n                  projectAdminTokenAccount,\n                  referralTokenAccountPubKey,\n                  partnerTokenAccount,\n                }) => {\n                  return await this.program.methods\n                    .claim()\n                    .accounts({\n                      payer: payerPubKey,\n                      project: referralAccount.project,\n                      admin: project.admin,\n                      projectAdminTokenAccount,\n                      referralAccount: referralAccountPubKey,\n                      referralTokenAccount: referralTokenAccountPubKey,\n                      partner: referralAccount.partner,\n                      partnerTokenAccount: partnerTokenAccount,\n                      mint,\n                      tokenProgram: tokenProgramId,\n                    })\n                    .preInstructions(preInstructions)\n                    .transaction();\n                },\n              ),\n            );\n\n            const messageV0 = new TransactionMessage({\n              payerKey: payerPubKey,\n              instructions: txs.flatMap((tx) => tx.instructions),\n              recentBlockhash: blockhash,\n            }).compileToV0Message([lookupTableAccount]);\n\n            return new VersionedTransaction(messageV0);\n          }),\n        );\n      }),\n    );\n\n    return vtTxs.flat();\n  }\n}\n","import { AccountInfo, Connection, PublicKey } from \"@solana/web3.js\";\n\nexport function chunks<T>(array: T[], size: number): T[][] {\n  return Array.apply(0, new Array(Math.ceil(array.length / size))).map(\n    (_: any, index: number) => array.slice(index * size, (index + 1) * size),\n  );\n}\n\nexport async function chunkedGetMultipleAccountInfos(\n  connection: Connection,\n  pks: PublicKey[],\n  chunkSize: number = 100,\n): Promise<(AccountInfo<Buffer> | null)[]> {\n  return (\n    await Promise.all(\n      chunks(pks, chunkSize).map((chunk) =>\n        connection.getMultipleAccountsInfo(chunk),\n      ),\n    )\n  ).flat();\n}\n","import { PublicKey } from \"@solana/web3.js\";\n\nexport const PROGRAM_ID = new PublicKey(\n  \"REFER4ZgmyYx9c6He5XfaTMiGfdLwRnkV4RPp9t9iF3\",\n);\n","export type Referral = {\n  version: \"0.1.0\";\n  name: \"referral\";\n  instructions: [\n    {\n      name: \"initializeProject\";\n      accounts: [\n        {\n          name: \"payer\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"base\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"project\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"params\";\n          type: {\n            defined: \"InitializeProjectParams\";\n          };\n        },\n      ];\n    },\n    {\n      name: \"initializeReferralAccount\";\n      accounts: [\n        {\n          name: \"payer\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"partner\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"project\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"referralAccount\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"params\";\n          type: {\n            defined: \"InitializeReferralAccountParams\";\n          };\n        },\n      ];\n    },\n    {\n      name: \"initializeReferralAccountWithName\";\n      accounts: [\n        {\n          name: \"payer\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"partner\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"project\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"referralAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"params\";\n          type: {\n            defined: \"InitializeReferralAccountWithNameParams\";\n          };\n        },\n      ];\n    },\n    {\n      name: \"updateProject\";\n      accounts: [\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"project\";\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"params\";\n          type: {\n            defined: \"UpdateProjectParams\";\n          };\n        },\n      ];\n    },\n    {\n      name: \"transferProject\";\n      accounts: [\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"newAdmin\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"project\";\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"params\";\n          type: {\n            defined: \"TransferProjectParams\";\n          };\n        },\n      ];\n    },\n    {\n      name: \"updateReferralAccount\";\n      accounts: [\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"project\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"referralAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"params\";\n          type: {\n            defined: \"UpdateReferralAccountParams\";\n          };\n        },\n      ];\n    },\n    {\n      name: \"transferReferralAccount\";\n      accounts: [\n        {\n          name: \"partner\";\n          isMut: false;\n          isSigner: true;\n        },\n        {\n          name: \"newPartner\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"referralAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"params\";\n          type: {\n            defined: \"TransferReferralAccountParams\";\n          };\n        },\n      ];\n    },\n    {\n      name: \"initializeReferralTokenAccount\";\n      accounts: [\n        {\n          name: \"payer\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"project\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"referralAccount\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"referralTokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"mint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: \"claim\";\n      accounts: [\n        {\n          name: \"payer\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"project\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"projectAdminTokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"referralAccount\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"referralTokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"partner\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"partnerTokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"mint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"associatedTokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: \"createAdminTokenAccount\";\n      accounts: [\n        {\n          name: \"project\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"projectAuthority\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"admin\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"projectAdminTokenAccount\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"mint\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"tokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"associatedTokenProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [];\n    },\n    {\n      name: \"withdrawFromProject\";\n      accounts: [\n        {\n          name: \"admin\";\n          isMut: true;\n          isSigner: true;\n        },\n        {\n          name: \"project\";\n          isMut: false;\n          isSigner: false;\n        },\n        {\n          name: \"projectAuthority\";\n          isMut: true;\n          isSigner: false;\n        },\n        {\n          name: \"systemProgram\";\n          isMut: false;\n          isSigner: false;\n        },\n      ];\n      args: [\n        {\n          name: \"params\";\n          type: {\n            defined: \"WithdrawFromProjectParams\";\n          };\n        },\n      ];\n    },\n  ];\n  accounts: [\n    {\n      name: \"project\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"base\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"admin\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"name\";\n            type: \"string\";\n          },\n          {\n            name: \"defaultShareBps\";\n            type: \"u16\";\n          },\n        ];\n      };\n    },\n    {\n      name: \"referralAccount\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"partner\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"project\";\n            type: \"publicKey\";\n          },\n          {\n            name: \"shareBps\";\n            type: \"u16\";\n          },\n          {\n            name: \"name\";\n            type: {\n              option: \"string\";\n            };\n          },\n        ];\n      };\n    },\n  ];\n  types: [\n    {\n      name: \"InitializeProjectParams\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"name\";\n            type: \"string\";\n          },\n          {\n            name: \"defaultShareBps\";\n            type: \"u16\";\n          },\n        ];\n      };\n    },\n    {\n      name: \"InitializeReferralAccountWithNameParams\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"name\";\n            type: \"string\";\n          },\n        ];\n      };\n    },\n    {\n      name: \"InitializeReferralAccountParams\";\n      type: {\n        kind: \"struct\";\n        fields: [];\n      };\n    },\n    {\n      name: \"TransferProjectParams\";\n      type: {\n        kind: \"struct\";\n        fields: [];\n      };\n    },\n    {\n      name: \"TransferReferralAccountParams\";\n      type: {\n        kind: \"struct\";\n        fields: [];\n      };\n    },\n    {\n      name: \"UpdateProjectParams\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"name\";\n            type: {\n              option: \"string\";\n            };\n          },\n          {\n            name: \"defaultShareBps\";\n            type: {\n              option: \"u16\";\n            };\n          },\n        ];\n      };\n    },\n    {\n      name: \"UpdateReferralAccountParams\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"shareBps\";\n            type: \"u16\";\n          },\n        ];\n      };\n    },\n    {\n      name: \"WithdrawFromProjectParams\";\n      type: {\n        kind: \"struct\";\n        fields: [\n          {\n            name: \"amount\";\n            type: \"u64\";\n          },\n        ];\n      };\n    },\n  ];\n  events: [\n    {\n      name: \"InitializeProjectEvent\";\n      fields: [\n        {\n          name: \"project\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"admin\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"name\";\n          type: \"string\";\n          index: false;\n        },\n        {\n          name: \"defaultShareBps\";\n          type: \"u16\";\n          index: false;\n        },\n      ];\n    },\n    {\n      name: \"UpdateProjectEvent\";\n      fields: [\n        {\n          name: \"project\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"name\";\n          type: \"string\";\n          index: false;\n        },\n        {\n          name: \"defaultShareBps\";\n          type: \"u16\";\n          index: false;\n        },\n      ];\n    },\n    {\n      name: \"InitializeReferralAccountEvent\";\n      fields: [\n        {\n          name: \"project\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"partner\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"referralAccount\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"shareBps\";\n          type: \"u16\";\n          index: false;\n        },\n        {\n          name: \"name\";\n          type: {\n            option: \"string\";\n          };\n          index: false;\n        },\n      ];\n    },\n    {\n      name: \"UpdateReferralAccountEvent\";\n      fields: [\n        {\n          name: \"referralAccount\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"shareBps\";\n          type: \"u16\";\n          index: false;\n        },\n      ];\n    },\n    {\n      name: \"InitializeReferralTokenAccountEvent\";\n      fields: [\n        {\n          name: \"project\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"referralAccount\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"referralTokenAccount\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"mint\";\n          type: \"publicKey\";\n          index: false;\n        },\n      ];\n    },\n    {\n      name: \"ClaimEvent\";\n      fields: [\n        {\n          name: \"project\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"projectAdminTokenAccount\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"referralAccount\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"referralTokenAccount\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"partnerTokenAccount\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"mint\";\n          type: \"publicKey\";\n          index: false;\n        },\n        {\n          name: \"referralAmount\";\n          type: \"u64\";\n          index: false;\n        },\n        {\n          name: \"projectAmount\";\n          type: \"u64\";\n          index: false;\n        },\n      ];\n    },\n  ];\n  errors: [\n    {\n      code: 6000;\n      name: \"InvalidCalculation\";\n    },\n    {\n      code: 6001;\n      name: \"InvalidSharePercentage\";\n    },\n    {\n      code: 6002;\n      name: \"NameTooLong\";\n    },\n  ];\n};\n\nexport const IDL: Referral = {\n  version: \"0.1.0\",\n  name: \"referral\",\n  instructions: [\n    {\n      name: \"initializeProject\",\n      accounts: [\n        {\n          name: \"payer\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"base\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"project\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"params\",\n          type: {\n            defined: \"InitializeProjectParams\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"initializeReferralAccount\",\n      accounts: [\n        {\n          name: \"payer\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"partner\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"project\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"referralAccount\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"params\",\n          type: {\n            defined: \"InitializeReferralAccountParams\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"initializeReferralAccountWithName\",\n      accounts: [\n        {\n          name: \"payer\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"partner\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"project\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"referralAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"params\",\n          type: {\n            defined: \"InitializeReferralAccountWithNameParams\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"updateProject\",\n      accounts: [\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"project\",\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"params\",\n          type: {\n            defined: \"UpdateProjectParams\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"transferProject\",\n      accounts: [\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"newAdmin\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"project\",\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"params\",\n          type: {\n            defined: \"TransferProjectParams\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"updateReferralAccount\",\n      accounts: [\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"project\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"referralAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"params\",\n          type: {\n            defined: \"UpdateReferralAccountParams\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"transferReferralAccount\",\n      accounts: [\n        {\n          name: \"partner\",\n          isMut: false,\n          isSigner: true,\n        },\n        {\n          name: \"newPartner\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"referralAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"params\",\n          type: {\n            defined: \"TransferReferralAccountParams\",\n          },\n        },\n      ],\n    },\n    {\n      name: \"initializeReferralTokenAccount\",\n      accounts: [\n        {\n          name: \"payer\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"project\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"referralAccount\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"referralTokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"mint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: \"claim\",\n      accounts: [\n        {\n          name: \"payer\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"project\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"projectAdminTokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"referralAccount\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"referralTokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"partner\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"partnerTokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"mint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"associatedTokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: \"createAdminTokenAccount\",\n      accounts: [\n        {\n          name: \"project\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"projectAuthority\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"admin\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"projectAdminTokenAccount\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"mint\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"tokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"associatedTokenProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [],\n    },\n    {\n      name: \"withdrawFromProject\",\n      accounts: [\n        {\n          name: \"admin\",\n          isMut: true,\n          isSigner: true,\n        },\n        {\n          name: \"project\",\n          isMut: false,\n          isSigner: false,\n        },\n        {\n          name: \"projectAuthority\",\n          isMut: true,\n          isSigner: false,\n        },\n        {\n          name: \"systemProgram\",\n          isMut: false,\n          isSigner: false,\n        },\n      ],\n      args: [\n        {\n          name: \"params\",\n          type: {\n            defined: \"WithdrawFromProjectParams\",\n          },\n        },\n      ],\n    },\n  ],\n  accounts: [\n    {\n      name: \"project\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"base\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"admin\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"name\",\n            type: \"string\",\n          },\n          {\n            name: \"defaultShareBps\",\n            type: \"u16\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"referralAccount\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"partner\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"project\",\n            type: \"publicKey\",\n          },\n          {\n            name: \"shareBps\",\n            type: \"u16\",\n          },\n          {\n            name: \"name\",\n            type: {\n              option: \"string\",\n            },\n          },\n        ],\n      },\n    },\n  ],\n  types: [\n    {\n      name: \"InitializeProjectParams\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"name\",\n            type: \"string\",\n          },\n          {\n            name: \"defaultShareBps\",\n            type: \"u16\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"InitializeReferralAccountWithNameParams\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"name\",\n            type: \"string\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"InitializeReferralAccountParams\",\n      type: {\n        kind: \"struct\",\n        fields: [],\n      },\n    },\n    {\n      name: \"TransferProjectParams\",\n      type: {\n        kind: \"struct\",\n        fields: [],\n      },\n    },\n    {\n      name: \"TransferReferralAccountParams\",\n      type: {\n        kind: \"struct\",\n        fields: [],\n      },\n    },\n    {\n      name: \"UpdateProjectParams\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"name\",\n            type: {\n              option: \"string\",\n            },\n          },\n          {\n            name: \"defaultShareBps\",\n            type: {\n              option: \"u16\",\n            },\n          },\n        ],\n      },\n    },\n    {\n      name: \"UpdateReferralAccountParams\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"shareBps\",\n            type: \"u16\",\n          },\n        ],\n      },\n    },\n    {\n      name: \"WithdrawFromProjectParams\",\n      type: {\n        kind: \"struct\",\n        fields: [\n          {\n            name: \"amount\",\n            type: \"u64\",\n          },\n        ],\n      },\n    },\n  ],\n  events: [\n    {\n      name: \"InitializeProjectEvent\",\n      fields: [\n        {\n          name: \"project\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"admin\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"name\",\n          type: \"string\",\n          index: false,\n        },\n        {\n          name: \"defaultShareBps\",\n          type: \"u16\",\n          index: false,\n        },\n      ],\n    },\n    {\n      name: \"UpdateProjectEvent\",\n      fields: [\n        {\n          name: \"project\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"name\",\n          type: \"string\",\n          index: false,\n        },\n        {\n          name: \"defaultShareBps\",\n          type: \"u16\",\n          index: false,\n        },\n      ],\n    },\n    {\n      name: \"InitializeReferralAccountEvent\",\n      fields: [\n        {\n          name: \"project\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"partner\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"referralAccount\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"shareBps\",\n          type: \"u16\",\n          index: false,\n        },\n        {\n          name: \"name\",\n          type: {\n            option: \"string\",\n          },\n          index: false,\n        },\n      ],\n    },\n    {\n      name: \"UpdateReferralAccountEvent\",\n      fields: [\n        {\n          name: \"referralAccount\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"shareBps\",\n          type: \"u16\",\n          index: false,\n        },\n      ],\n    },\n    {\n      name: \"InitializeReferralTokenAccountEvent\",\n      fields: [\n        {\n          name: \"project\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"referralAccount\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"referralTokenAccount\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"mint\",\n          type: \"publicKey\",\n          index: false,\n        },\n      ],\n    },\n    {\n      name: \"ClaimEvent\",\n      fields: [\n        {\n          name: \"project\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"projectAdminTokenAccount\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"referralAccount\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"referralTokenAccount\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"partnerTokenAccount\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"mint\",\n          type: \"publicKey\",\n          index: false,\n        },\n        {\n          name: \"referralAmount\",\n          type: \"u64\",\n          index: false,\n        },\n        {\n          name: \"projectAmount\",\n          type: \"u64\",\n          index: false,\n        },\n      ],\n    },\n  ],\n  errors: [\n    {\n      code: 6000,\n      name: \"InvalidCalculation\",\n    },\n    {\n      code: 6001,\n      name: \"InvalidSharePercentage\",\n    },\n    {\n      code: 6002,\n      name: \"NameTooLong\",\n    },\n  ],\n};\n","import {\n  createAssociatedTokenAccountInstruction,\n  getAssociatedTokenAddressSync,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport { Connection, PublicKey, TransactionInstruction } from \"@solana/web3.js\";\n\nexport const getOrCreateATAInstruction = async (\n  tokenMint: PublicKey,\n  owner: PublicKey,\n  connection: Connection,\n  payer: PublicKey = owner,\n  allowOwnerOffCurve = true,\n  tokenProgram: PublicKey = TOKEN_PROGRAM_ID,\n): Promise<[PublicKey, TransactionInstruction?]> => {\n  let toAccount;\n  try {\n    toAccount = getAssociatedTokenAddressSync(\n      tokenMint,\n      owner,\n      allowOwnerOffCurve,\n      tokenProgram,\n    );\n    const account = await connection.getAccountInfo(toAccount);\n\n    if (!account) {\n      const ix = createAssociatedTokenAccountInstruction(\n        payer,\n        toAccount,\n        owner,\n        tokenMint,\n        tokenProgram,\n      );\n      return [toAccount, ix];\n    }\n    return [toAccount, undefined];\n  } catch (e) {\n    /* handle error */\n    console.error(\"Error::getOrCreateATAInstruction\", e);\n    throw e;\n  }\n};\n","import { GetProgramAccountsFilter, PublicKey } from \"@solana/web3.js\";\n\nexport const projectAdminFilter = (publicKey: PublicKey) => {\n  return {\n    memcmp: {\n      offset: 8 + 32,\n      bytes: publicKey.toBase58(),\n    },\n  };\n};\n\nexport const referralAccountPartnerFilter = (\n  publicKey: PublicKey,\n): GetProgramAccountsFilter => {\n  return {\n    memcmp: {\n      offset: 8,\n      bytes: publicKey.toBase58(),\n    },\n  };\n};\n\nexport const referralAccountProjectFilter = (\n  publicKey: PublicKey,\n): GetProgramAccountsFilter => {\n  return {\n    memcmp: {\n      offset: 8 + 32,\n      bytes: publicKey.toBase58(),\n    },\n  };\n};\n"],"mappings":"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","names":["createAssociatedTokenAccountInstruction","getAssociatedTokenAddressSync","TOKEN_PROGRAM_ID","PublicKey","chunk","PublicKey","TOKEN_PROGRAM_ID","tokens","getAssociatedTokenAddressSync","createAssociatedTokenAccountInstruction","_0"]}